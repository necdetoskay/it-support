generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String
  email           String       @unique
  password        String
  role            String       @default("USER")
  isApproved      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  atananTalepler  Talep[]      @relation("AtananTalepler")
  yaptigiIslemler TalepIslem[]
  backups         DatabaseBackup[]
}

model Personel {
  id                  String    @id @default(cuid())
  ad                  String
  departmanId         String
  telefon             String
  olusturulmaTarihi   DateTime  @default(now())
  guncellenmeTarihi   DateTime  @updatedAt
  aktif               Boolean   @default(true)
  soyad               String
  departman           Departman @relation(fields: [departmanId], references: [id])
  raporEttigiTalepler Talep[]   @relation("RaporEdenTalepler")
}

model Departman {
  id                String     @id @default(cuid())
  ad                String     @unique
  aciklama          String?
  olusturulmaTarihi DateTime   @default(now())
  guncellenmeTarihi DateTime   @updatedAt
  personeller       Personel[]
  talepler          Talep[]
}

model Kategori {
  id                String     @id @default(cuid())
  ad                String
  aciklama          String?
  ustKategoriId     String?
  olusturulmaTarihi DateTime   @default(now())
  guncellenmeTarihi DateTime   @updatedAt
  Kategori          Kategori?  @relation("KategoriToKategori", fields: [ustKategoriId], references: [id])
  other_Kategori    Kategori[] @relation("KategoriToKategori")
  slaKurallari      SLAKural[]
  talepler          Talep[]
}

model SLAKural {
  id                String   @id @default(cuid())
  kategoriId        String
  oncelik           Oncelik
  yanitlamaSuresi   Int
  cozumSuresi       Int
  olusturulmaTarihi DateTime @default(now())
  guncellenmeTarihi DateTime @updatedAt
  kategori          Kategori @relation(fields: [kategoriId], references: [id])
}

model SorunEtiket {
  id                String   @id @default(cuid())
  ad                String   @unique
  aciklama          String?
  olusturulmaTarihi DateTime @default(now())
  guncellenmeTarihi DateTime @updatedAt
  talepler          Talep[]  @relation("TalepSorunEtiketleri")
}

model CozumEtiket {
  id                String   @id @default(cuid())
  ad                String   @unique
  aciklama          String?
  olusturulmaTarihi DateTime @default(now())
  guncellenmeTarihi DateTime @updatedAt
  talepler          Talep[]  @relation("TalepCozumEtiketleri")
}

model Talep {
  id                String        @id @default(cuid())
  baslik            String
  kategoriId        String
  departmanId       String
  oncelik           Oncelik       @default(ORTA)
  durum             TalepDurum    @default(DEVAM_EDIYOR)
  raporEdenId       String
  atananId          String?
  sonTarih          DateTime?
  olusturulmaTarihi DateTime      @default(now())
  guncellenmeTarihi DateTime      @updatedAt
  kapatilmaTarihi   DateTime?
  sorunDetay        String
  atanan            User?         @relation("AtananTalepler", fields: [atananId], references: [id])
  departman         Departman     @relation(fields: [departmanId], references: [id])
  kategori          Kategori      @relation(fields: [kategoriId], references: [id])
  raporEden         Personel      @relation("RaporEdenTalepler", fields: [raporEdenId], references: [id])
  islemler          TalepIslem[]
  cozumEtiketleri   CozumEtiket[] @relation("TalepCozumEtiketleri")
  sorunEtiketleri   SorunEtiket[] @relation("TalepSorunEtiketleri")
}

model TalepIslem {
  id                String            @id @default(cuid())
  tip               TalepIslemTipi
  aciklama          String
  durum             TalepDurum
  olusturulmaTarihi DateTime          @default(now())
  guncellenmeTarihi DateTime          @updatedAt
  talepId           String
  yapanKullaniciId  String
  talep             Talep             @relation(fields: [talepId], references: [id], onDelete: Cascade)
  yapanKullanici    User              @relation(fields: [yapanKullaniciId], references: [id])
  dosyalar          TalepIslemDosya[]

  @@index([talepId])
  @@index([yapanKullaniciId])
}

model TalepIslemDosya {
  id                String     @id @default(cuid())
  olusturulmaTarihi DateTime   @default(now())
  guncellenmeTarihi DateTime   @updatedAt
  islemId           String
  dosyaAdi          String
  dosyaBoyutu       Int
  dosyaTipi         String
  dosyaYolu         String
  islem             TalepIslem @relation(fields: [islemId], references: [id], onDelete: Cascade)

  @@index([islemId])
}

model DatabaseBackup {
  id                String   @id @default(cuid())
  fileName          String
  filePath          String
  fileSize          Int
  type              String   // "full", "data-only", "selected" 
  description       String?
  tables            String[] // Se√ßilen tablolar
  createdAt         DateTime @default(now())
  guncellenmeTarihi DateTime @updatedAt
  createdBy         String
  user              User     @relation(fields: [createdBy], references: [id])
}

enum Oncelik {
  DUSUK
  ORTA
  YUKSEK
  ACIL
}

enum TalepDurum {
  DEVAM_EDIYOR
  TAMAMLANDI
  BEKLEMEDE
  IPTAL
}

enum TalepIslemTipi {
  INCELEME
  COZUM
  GUNCELLEME
  RED
  BEKLEMEDE
  TAMAMLANDI
}
