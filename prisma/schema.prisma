generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  password          String
  role              String            @default("USER")
  isApproved        Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  departman         Departman?        @relation(fields: [departmanId], references: [id])
  departmanId       String?
  backups           DatabaseBackup[]
  yorumlar          SorunYorum[]      @relation("UserYorumlar")
  bilgiBankasi      BilgiBankasi[]    @relation("UserBilgiBankasi")
  bildirimler       Bildirim[]
  bildirilenSorunlar Sorun[]         @relation("UserSorunlar")
  atananSorunlar    Sorun[]          @relation("AtananKullanici")
}

model Departman {
  id              String    @id @default(cuid())
  ad              String    @unique
  aciklama        String?
  olusturmaTarihi DateTime  @default(now())
  guncellemeTarihi DateTime @updatedAt
  personeller     User[]
  sorunlar       Sorun[]
  personelListesi Personel[]
}

model Sorun {
  id              String       @id @default(cuid())
  baslik          String
  aciklama        String
  durum           String       @default("acik")
  oncelik         String       @default("normal")
  kategori        Kategori     @relation(fields: [kategoriId], references: [id])
  kategoriId      String
  departman       Departman    @relation(fields: [departmanId], references: [id])
  departmanId     String
  atanan          User        @relation("AtananKullanici", fields: [atananId], references: [id])
  atananId        String
  olusturan       User        @relation("UserSorunlar", fields: [olusturanId], references: [id])
  olusturanId     String
  olusturmaTarihi DateTime     @default(now())
  guncellemeTarihi DateTime    @updatedAt
  slaDurumu       String       @default("normal")
  yorumlar        SorunYorum[]
  cozumler        SorunCozum[]
  adimlar         SorunAdim[]
}

model SorunYorum {
  id              String   @id @default(cuid())
  icerik          String
  olusturan       User     @relation("UserYorumlar", fields: [olusturanId], references: [id])
  olusturanId     String
  olusturmaTarihi DateTime @default(now())
  sorun           Sorun    @relation(fields: [sorunId], references: [id])
  sorunId         String
}

model SorunCozum {
  id              String   @id @default(cuid())
  icerik          String
  olusturan       String
  olusturmaTarihi DateTime @default(now())
  sorun           Sorun    @relation(fields: [sorunId], references: [id])
  sorunId         String
}

model SorunAdim {
  id              String   @id @default(cuid())
  icerik          String
  tamamlandi      Boolean  @default(false)
  olusturmaTarihi DateTime @default(now())
  sorun           Sorun    @relation(fields: [sorunId], references: [id])
  sorunId         String
}

model BilgiBankasi {
  id              String   @id @default(cuid())
  baslik          String
  icerik          String
  kategori        String
  etiketler       String[]
  olusturan       User     @relation("UserBilgiBankasi", fields: [olusturanId], references: [id])
  olusturanId     String
  olusturmaTarihi DateTime @default(now())
  guncellemeTarihi DateTime @updatedAt
  faydali         Int      @default(0)
  faydaliDegil    Int      @default(0)
}

model Bildirim {
  id              String   @id @default(cuid())
  baslik          String
  mesaj           String
  tip             String
  okundu          Boolean  @default(false)
  olusturmaTarihi DateTime @default(now())
  kullanici       User     @relation(fields: [kullaniciId], references: [id])
  kullaniciId     String
}

model DatabaseBackup {
  id              String   @id @default(cuid())
  dosyaAdi        String
  boyut           Int
  durum           String
  olusturmaTarihi DateTime @default(now())
  kullanici       User     @relation(fields: [kullaniciId], references: [id])
  kullaniciId     String
}

model Personel {
  id              String    @id @default(cuid())
  ad              String
  telefon         String
  aktif           Boolean   @default(true)
  departman       Departman @relation(fields: [departmanId], references: [id])
  departmanId     String
  olusturmaTarihi DateTime  @default(now())
  guncellemeTarihi DateTime @updatedAt
}

model Kategori {
  id              String    @id @default(cuid())
  ad              String    @unique
  aciklama        String?
  olusturmaTarihi DateTime  @default(now())
  guncellemeTarihi DateTime @updatedAt
  talepler        Sorun[]
  ustKategori     Kategori?  @relation("AltKategoriler", fields: [ustKategoriId], references: [id])
  ustKategoriId   String?
  altKategoriler  Kategori[] @relation("AltKategoriler")
}
